name: "Build Godot Action"
description: "Build a Godot project for multiple platforms"
author: "mlm-games"

inputs:
  # BINARY_NAME:
  #   description: 'Name of the exported binary'
  #   required: true
  EXPORT_PRESET_NAME:
    description: 'Name of the preset in `export_presets.cfg` to use'
    required: true
  GODOT_VER:
    description: 'Godot version to use, uses latest Godot 4.x release by default. (e.g. 4.2.1)'
    required: false
    default: ''
  # PACKAGE:
  #   description: 'Set true to output an artifact zip file'
  #   default: false
  PROJECT_DIR:
    description: 'Location of Godot project in repository'
    default: "."
  DEBUG_MODE:
    description: 'Whether or not to use `--export-debug`'
    default: false
  BUTLER_UPLOAD:
    description: 'Upload to itch.io using butler'
    default: false
  # BUTLER_UPLOAD_CHANNEL:
  #   description: 'Channel to upload to itch.io using butler'
  #   default: "windows"
  BUTLER_CREDENTIALS:
    description: 'butler credentials'
    default: "windows"
  ITCH_USER_SLASH_GAME:
    description: 'Your username and gamename in the format of "user/game"'
    default: ''
  RELEASE_KEYSTORE:
    description: 'Your release keystore'
    default: ''
  KEYSTORE_PASSPHRASE:
    description: 'the passphrase used to encrypt the keystore'
    default: ''
  KEY_ALIAS:
    description: 'Your game signing key alias'
    default: ''
  KEY_PASSWORD:
    description: 'Signing key password'
    default: ''
    

outputs:
  build:
    description: 'Path to the build output directory'
    value: ${{ steps.export.outputs.build }}

runs:
  using: "composite"
  steps:
    - name: Get Godot version
      id: version
      shell: bash
      run: |
        if [ -z "${{ inputs.GODOT_VER }}" ]; then
          # Get latest Godot 4.x release version from GitHub API
          LATEST_VER=$(curl -s https://api.github.com/repos/godotengine/godot/releases | grep -oP '"tag_name": "\K[^"]+' | grep '^4\.' | head -n 1 | sed 's/-stable//')
          echo "GODOT_VERSION=${LATEST_VER}" >> $GITHUB_OUTPUT
        else
          echo "GODOT_VERSION=${{ inputs.GODOT_VER }}" >> $GITHUB_OUTPUT
        fi

    - name: Create directories
      shell: bash
      run: |
        mkdir -p ~/.local/share/godot/export_templates/${{ steps.version.outputs.GODOT_VERSION }}.stable
        mkdir -p ~/godot-binary

    - name: Download Godot
      shell: bash
      run: |
        GODOT_BASENAME="Godot_v${{ steps.version.outputs.GODOT_VERSION }}-stable_linux.x86_64"
        wget -q "https://github.com/godotengine/godot/releases/download/${{ steps.version.outputs.GODOT_VERSION }}-stable/${GODOT_BASENAME}.zip" -O ~/godot-binary/godot.zip
        unzip -q ~/godot-binary/godot.zip -d ~/godot-binary
        chmod +x ~/godot-binary/${GODOT_BASENAME}
        mv ~/godot-binary/${GODOT_BASENAME} ~/godot-binary/godot

    - name: Download and install export templates
      shell: bash
      run: |
        TEMPLATES_BASENAME="Godot_v${{ steps.version.outputs.GODOT_VERSION }}-stable_export_templates"
        wget -q "https://github.com/godotengine/godot/releases/download/${{ steps.version.outputs.GODOT_VERSION }}-stable/${TEMPLATES_BASENAME}.tpz" -O ~/templates.tpz
        unzip -q ~/templates.tpz -d ~/.local/share/godot/export_templates/temp
        mkdir -p ~/.local/share/godot/export_templates/${{ steps.version.outputs.GODOT_VERSION }}.stable
        mv ~/.local/share/godot/export_templates/temp/templates/* ~/.local/share/godot/export_templates/${{ steps.version.outputs.GODOT_VERSION }}.stable/

    - name: Setup Android SDK
      if: contains(inputs.EXPORT_PRESET_NAME, 'Android') #TODO: implement a better way?
      shell: bash
      run: |
        # Install OpenJDK 17
        sudo apt-get update
        sudo apt-get install -y openjdk-17-jdk
        
        # Create Android SDK directory
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        mkdir -p $ANDROID_SDK_ROOT
        
        # Download and install Android command line tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip #TODO: Just use a setup action instead of hardcoding? 
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
        mv cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest
        
        # Add Android SDK to PATH
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin
        
        # Accept licenses and install required packages
        sudo $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses
        sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "build-tools;34.0.0" "platforms;android-34" "cmdline-tools;latest" "cmake;3.10.2.4988404" "ndk;23.2.8568313"        
        
        # Export environment variables
        #echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        #echo "PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_ENV

        echo "JAVA_PATH=$(dirname $(dirname $(readlink -f $(which javac))))" >> $GITHUB_ENV

        # Open the editor once to generate the config file
        ~/godot-binary/godot --headless --check-only --quit

        export GODOT_CFG=$(ls ~/.config/godot/editor_settings-*.tres)
        sed -i -e "s:\(^.*java_sdk_path\)\s*=.*$:\1 = "$JAVA_PATH":" $GODOT_CFG
        sed -i -e "s:\(^.*android_sdk_path\)\s*=.*$:\1 = "$ANDROID_SDK_ROOT":" $GODOT_CFG

    - name: Decode Keystore
      if: inputs.RELEASE_KEYSTORE != ''
      shell: bash
      run: |
        echo "${{ inputs.KEYSTORE }}" > release.keystore.asc
        gpg -d --passphrase "${{ inputs.KEYSTORE_PASSPHRASE }}" --batch release.keystore.asc > release.keystore

    - name: Insert keystore values
      if: inputs.RELEASE_KEYSTORE != ''
      shell: bash
      run: |
        cd ${GITHUB_WORKSPACE}/${{ inputs.PROJECT_DIR }}
        export GODOT_ANDROID_KEYSTORE_RELEASE_PATH="./release.keystore"
        export GODOT_ANDROID_KEYSTORE_RELEASE_USER=${{ inputs.KEY_ALIAS }}
        export GODOT_ANDROID_KEYSTORE_RELEASE_PASSWORD=${{ inputs.KEY_PASSWORD }}
        
    - name: Export project
      id: export
      shell: bash
      run: |
        # Set export mode
        mode="export-release"
        if [ "${{ inputs.DEBUG_MODE }}" = "true" ]; then
          echo "Exporting in debug mode!"
          mode="export-debug"
        fi

        # Set build path
        BUILD_PATH="${GITHUB_WORKSPACE}/${{ inputs.PROJECT_DIR }}/builds/"
        echo "build=${BUILD_PATH}" >> $GITHUB_OUTPUT


         # Export project
        echo "Building for ${{ inputs.EXPORT_PRESET_NAME }}"
        cd "${GITHUB_WORKSPACE}/${{ inputs.PROJECT_DIR }}"
        echo "version_name=$(grep 'version/name=' export_presets.cfg | awk -F'"' '{print $2}')" >> $GITHUB_ENV
        echo "version_code=$(grep 'version/code=' export_presets.cfg | head -1 | awk -F'=' '{print $2}')" >> $GITHUB_ENV
        mkdir -p builds/osx/
        mkdir builds/web/
        ~/godot-binary/godot --headless --${mode} "${{ inputs.EXPORT_PRESET_NAME }}"
        echo "Build Done"
            
    - name: Upload using butler
      if: inputs.BUTLER_UPLOAD == 'true'
      shell: bash
      run: |
        curl -L -o butler.zip https://broth.itch.zone/butler/linux-amd64/LATEST/archive/default
        unzip butler.zip
        cp butler /usr/bin
        chmod +x /usr/bin/butler
        
        export BUTLER_API_KEY=${{ inputs.BUTLER_CREDENTIALS }}
        
        # Get export paths and upload each existing file
        export_paths=($(grep 'export_path=' export_presets.cfg | awk -F'=' '{print $2}' | tr -d '"'))
        
        for path in "${export_paths[@]}"; do
            if [ -f "$path" ]; then
                echo "Found exported file: $path"
                
                # Determine the channel based on the file path/name
                channel=""
                case "$path" in
                    *"windows"*|*".exe") channel="windows" ;;
                    *"web"*|*"html") channel="web" ;;
                    *"linux"*"x86_64") channel="linux" ;;
                    *"linux"*"aarch64"*|*"arm64") channel="linux-arm64" ;;
                    *"macOS"*|*"osx"*) channel="osx" ;;
                    *"android"*"arm32"*) channel="android-arm32" ;;
                    *"android"*"arm64"*) channel="android-arm64" ;;
                    *"android"*"x86_64"*) channel="android-x86_64" ;;
                    *) echo "Unknown platform for $path" ; continue ;;
                esac
    
                # Upload to itch.io
                echo "Uploading to channel: $channel"
                butler push "$path" "${{ inputs.ITCH_USER_SLASH_GAME }}:$channel" --userversion ${{ env.version_name }}
            else
                echo "File not found: $path"
            fi
        done              


branding:
  icon: loader
  color: blue
