name: "Build Godot Action"
description: "Build a Godot project for multiple platforms"
author: "mlm-games"

inputs:
  EXPORT_PRESET_NAME:
    description: 'Name of the preset in export_presets.cfg to use (e.g., "Windows Desktop", "Linux/X11", "macOS", "Android arm64")'
    required: true
  GODOT_VER:
    description: 'Godot version to use (e.g., 4.2.2-stable). If empty, latest stable 4.x is used.'
    required: false
    default: ''
  PROJECT_DIR:
    description: 'Location of the Godot project in the repository'
    required: false
    default: "."
  DEBUG_MODE:
    description: 'Use --export-debug instead of --export-release'
    required: false
    default: 'false'
  GODOT_PREVIEW_BUILDS:
    description: 'Use Godot preview builds (from godot-builds repo)'
    required: false
    default: 'false'
  BUTLER_UPLOAD:
    description: 'Upload to itch.io using butler'
    required: false
    default: 'false'
  BUTLER_CREDENTIALS:
    description: 'Butler API key (itch.io)'
    required: false
    default: ''
  ITCH_USER_SLASH_GAME:
    description: 'Itch.io target in the format "user/game"'
    required: false
    default: ''
  RELEASE_KEYSTORE:
    description: 'Encrypted/armored release keystore (Android). Will be decrypted using KEYSTORE_PASSPHRASE.'
    required: false
    default: ''
  KEYSTORE_PASSPHRASE:
    description: 'Passphrase used to decrypt the keystore'
    required: false
    default: ''
  KEY_ALIAS:
    description: 'Android signing key alias'
    required: false
    default: ''
  KEY_PASSWORD:
    description: 'Android signing key password'
    required: false
    default: ''
  EXPORT_DIR:
    description: 'Directory to export files into (relative to project dir)'
    required: false
    default: 'builds'
  INSTALL_BLENDER:
    description: 'Install Blender (for .blend imports)'
    required: false
    default: 'false'
  BLENDER_VERSION:
    description: 'Blender version to install (e.g., 3.6.5 or 4.4.3)'
    required: false
    default: '4.4.3'
  IMPORT_TIMEOUT:
    description: 'Timeout for import process in minutes'
    required: false
    default: '60'
  VERBOSE_IMPORT:
    description: 'Enable verbose output during import'
    required: false
    default: 'true'

outputs:
  build:
    description: 'Path to the build output directory'
    value: ${{ steps.export.outputs.build }}
  version_name:
    description: 'Version name from export_presets.cfg'
    value: ${{ steps.export.outputs.version_name }}
  version_code:
    description: 'Version code from export_presets.cfg'
    value: ${{ steps.export.outputs.version_code }}

runs:
  using: "composite"
  steps:
    - name: Determine Godot version
      id: version
      shell: bash
      run: |
        set -Eeuo pipefail
        PREVIEW="${{ inputs.GODOT_PREVIEW_BUILDS }}"
        INPUT_VER="${{ inputs.GODOT_VER }}"
        GH_API_URL=""
        if [ -n "$INPUT_VER" ]; then
          echo "GODOT_VERSION=$INPUT_VER" >> "$GITHUB_OUTPUT"
          echo "Using specified Godot version: $INPUT_VER"
          exit 0
        fi

        if [ "$PREVIEW" = "true" ]; then
          GH_API_URL="https://api.github.com/repos/godotengine/godot-builds/releases"
          # latest preview 4.x (prerelease==true)
          LATEST="$(curl -fsSL "$GH_API_URL" | jq -r '.[] | select(.prerelease==true) | .tag_name' | grep -E '^4\.' | head -n1 || true)"
        else
          GH_API_URL="https://api.github.com/repos/godotengine/godot/releases"
          # latest stable 4.x (prerelease==false)
          LATEST="$(curl -fsSL "$GH_API_URL" | jq -r '.[] | select(.prerelease==false) | .tag_name' | grep -E '^4\.' | head -n1 || true)"
        fi

        if [ -z "$LATEST" ] || [ "$LATEST" = "null" ]; then
          echo "Auto-detect failed (rate limit or no releases). Please set GODOT_VER explicitly." >&2
          exit 1
        fi

        echo "GODOT_VERSION=$LATEST" >> "$GITHUB_OUTPUT"
        echo "Auto-detected Godot version: $LATEST"

    - name: Setup directories
      shell: bash
      run: |
        set -Eeuo pipefail
        mkdir -p ~/.local/share/godot/export_templates
        mkdir -p ~/.config/godot
        mkdir -p ~/godot-binary
        mkdir -p "${GITHUB_WORKSPACE}/${{ inputs.PROJECT_DIR }}/.godot/imported"
        mkdir -p "${GITHUB_WORKSPACE}/${{ inputs.PROJECT_DIR }}/${{ inputs.EXPORT_DIR }}"

    - name: Install system dependencies
      shell: bash
      run: |
        set -Eeuo pipefail
        sudo apt-get update
        sudo apt-get install -y \
          libxcursor1 \
          libxinerama1 \
          libxrandr2 \
          libxi6 \
          libgl1 \
          libglu1-mesa \
          xvfb \
          unzip \
          wget \
          jq \
          xz-utils \
          ca-certificates

    - name: Cache Godot binary
      uses: actions/cache@v4
      with:
        path: ~/godot-binary
        key: godot-bin-${{ steps.version.outputs.GODOT_VERSION }}-${{ inputs.GODOT_PREVIEW_BUILDS }}

    - name: Cache export templates
      id: tplcache
      uses: actions/cache@v4
      with:
        path: ~/.local/share/godot/export_templates
        key: godot-templates-${{ steps.version.outputs.GODOT_VERSION }}-${{ inputs.GODOT_PREVIEW_BUILDS }}

    - name: Install Blender
      if: inputs.INSTALL_BLENDER == 'true'
      shell: bash
      run: |
        set -Eeuo pipefail
        echo "Installing Blender ${{ inputs.BLENDER_VERSION }}..."
        MAJOR_MINOR="$(echo "${{ inputs.BLENDER_VERSION }}" | cut -d. -f1,2)"
        BLENDER_URL="https://download.blender.org/release/Blender${MAJOR_MINOR}/blender-${{ inputs.BLENDER_VERSION }}-linux-x64.tar.xz"
        wget -q "$BLENDER_URL" -O ~/blender.tar.xz
        tar -xf ~/blender.tar.xz -C ~/
        BLENDER_DIR="$(find ~ -maxdepth 1 -name "blender-*" -type d | head -n 1)"
        echo "${BLENDER_DIR}" >> "$GITHUB_PATH"
        echo "BLENDER_PATH=${BLENDER_DIR}/blender" >> "$GITHUB_ENV"
        "${BLENDER_DIR}/blender" --version

    - name: Download Godot
      shell: bash
      run: |
        set -Eeuo pipefail
        VER="${{ steps.version.outputs.GODOT_VERSION }}"
        BASE="Godot_v${VER}_linux.x86_64"
        PREVIEW="${{ inputs.GODOT_PREVIEW_BUILDS }}"

        if [ ! -f ~/godot-binary/godot ]; then
          if [ "$PREVIEW" = "true" ]; then
            URL="https://github.com/godotengine/godot-builds/releases/download/${VER}/${BASE}.zip"
          else
            URL="https://github.com/godotengine/godot/releases/download/${VER}/${BASE}.zip"
          fi
          echo "Downloading Godot from: $URL"
          wget -q "$URL" -O ~/godot-binary/godot.zip
          unzip -q ~/godot-binary/godot.zip -d ~/godot-binary
          chmod +x ~/godot-binary/${BASE}
          mv ~/godot-binary/${BASE} ~/godot-binary/godot
        else
          echo "Godot binary found in cache."
        fi

        ~/godot-binary/godot --version || { echo "Godot binary failed to run"; exit 1; }

    - name: Download and install export templates
      shell: bash
      run: |
        set -Eeuo pipefail
        if [ "${{ steps.tplcache.outputs.cache-hit }}" = "true" ]; then
          echo "Templates restored from cache."
          exit 0
        fi

        VER="${{ steps.version.outputs.GODOT_VERSION }}"
        BASE="Godot_v${VER}_export_templates"
        PREVIEW="${{ inputs.GODOT_PREVIEW_BUILDS }}"

        if [ "$PREVIEW" = "true" ]; then
          URL="https://github.com/godotengine/godot-builds/releases/download/${VER}/${BASE}.tpz"
        else
          URL="https://github.com/godotengine/godot/releases/download/${VER}/${BASE}.tpz"
        fi

        echo "Downloading templates from: $URL"
        wget -q "$URL" -O ~/templates.tpz
        unzip -o -q ~/templates.tpz -d ~/.local/share/godot/export_templates/

        TEMPLATE_VERSION="$(echo "$VER" | sed 's/-/./g')"
        if [ -d ~/.local/share/godot/export_templates/templates ]; then
          # Move into versioned folder expected by Godot, e.g., 4.2.2.stable
          rm -rf ~/.local/share/godot/export_templates/"$TEMPLATE_VERSION" || true
          mv ~/.local/share/godot/export_templates/templates ~/.local/share/godot/export_templates/"$TEMPLATE_VERSION"
        fi

        echo "Templates installed at ~/.local/share/godot/export_templates/${TEMPLATE_VERSION}"
        ls -la ~/.local/share/godot/export_templates/"$TEMPLATE_VERSION" || true

    - name: Set up JDK 17 (Android)
      if: contains(inputs.EXPORT_PRESET_NAME, 'Android')
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      if: contains(inputs.EXPORT_PRESET_NAME, 'Android')
      uses: android-actions/setup-android@v3

    - name: Configure Android SDK
      if: contains(inputs.EXPORT_PRESET_NAME, 'Android')
      shell: bash
      run: |
        # sdkmanager can close stdin early; avoid pipefail on 'yes' SIGPIPE and silence its stderr
        set +o pipefail
        yes 2>/dev/null | sdkmanager --licenses >/dev/null
        yes 2>/dev/null | sdkmanager \
          "platform-tools" \
          "build-tools;34.0.0" \
          "platforms;android-34" \
          "cmdline-tools;latest" \
          "cmake;3.10.2.4988404" \
          "ndk;23.2.8568313"
        set -o pipefail

    - name: Import Godot project
      shell: bash
      run: |
        set -Eeuo pipefail
        cd "${GITHUB_WORKSPACE}/${{ inputs.PROJECT_DIR }}"
        mkdir -p ~/.config/godot

        # Start virtual display
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

        echo "Starting project import (timeout: ${{ inputs.IMPORT_TIMEOUT }} minutes)..."
        if [ "${{ inputs.VERBOSE_IMPORT }}" = "true" ]; then
          timeout ${{ inputs.IMPORT_TIMEOUT }}m ~/godot-binary/godot --headless --verbose --import || true
        else
          timeout ${{ inputs.IMPORT_TIMEOUT }}m ~/godot-binary/godot --headless --import || true
        fi

        # Post-import check
        if [ ! -d ".godot/imported" ] || [ -z "$(ls -A .godot/imported 2>/dev/null || true)" ]; then
          echo "Import appears incomplete. Build may still succeed if minimal import is sufficient."
        fi

        # Configure editor settings for Android & Blender if available
        GODOT_CFG="$(find ~/.config/godot -name "editor_settings-*.tres" | head -n 1 || true)"
        if [ -n "$GODOT_CFG" ]; then
          if [ -n "${JAVA_HOME:-}" ]; then
            grep -q '^export/android/java_sdk_path' "$GODOT_CFG" \
              && sed -i "s|^export/android/java_sdk_path = .*|export/android/java_sdk_path = \"$JAVA_HOME\"|" "$GODOT_CFG" \
              || echo "export/android/java_sdk_path = \"$JAVA_HOME\"" >> "$GODOT_CFG"
          fi
          if [ -n "${ANDROID_SDK_ROOT:-}" ]; then
            grep -q '^export/android/android_sdk_path' "$GODOT_CFG" \
              && sed -i "s|^export/android/android_sdk_path = .*|export/android/android_sdk_path = \"$ANDROID_SDK_ROOT\"|" "$GODOT_CFG" \
              || echo "export/android/android_sdk_path = \"$ANDROID_SDK_ROOT\"" >> "$GODOT_CFG"
          fi
          if [ -n "${BLENDER_PATH:-}" ]; then
            grep -q '^filesystem/import/blender/blender3_path' "$GODOT_CFG" \
              && sed -i "s|^filesystem/import/blender/blender3_path = .*|filesystem/import/blender/blender3_path = \"$BLENDER_PATH\"|" "$GODOT_CFG" \
              || echo "filesystem/import/blender/blender3_path = \"$BLENDER_PATH\"" >> "$GODOT_CFG"
          fi
        fi

    - name: Decode Android keystore
      if: inputs.RELEASE_KEYSTORE != ''
      shell: bash
      run: |
        set -Eeuo pipefail
        echo "${{ inputs.RELEASE_KEYSTORE }}" > release.keystore.asc
        gpg -d --passphrase "${{ inputs.KEYSTORE_PASSPHRASE }}" --batch release.keystore.asc > ~/release.keystore
        echo "GODOT_ANDROID_KEYSTORE_RELEASE_PATH=$HOME/release.keystore" >> "$GITHUB_ENV"
        echo "GODOT_ANDROID_KEYSTORE_RELEASE_USER=${{ inputs.KEY_ALIAS }}" >> "$GITHUB_ENV"
        echo "GODOT_ANDROID_KEYSTORE_RELEASE_PASSWORD=${{ inputs.KEY_PASSWORD }}" >> "$GITHUB_ENV"

    - name: Export project
      id: export
      shell: bash
      run: |
        set -Eeuo pipefail
        cd "${GITHUB_WORKSPACE}/${{ inputs.PROJECT_DIR }}"

        mode="export-release"
        if [ "${{ inputs.DEBUG_MODE }}" = "true" ]; then
          echo "Exporting in debug mode"
          mode="export-debug"
        fi

        BUILD_PATH="${GITHUB_WORKSPACE}/${{ inputs.PROJECT_DIR }}/${{ inputs.EXPORT_DIR }}"
        mkdir -p "${BUILD_PATH}"
        # Output path for artifacts
        {
          echo "build=${BUILD_PATH}"
        } >> "$GITHUB_OUTPUT"

        # Extract version info from export_presets.cfg if present
        VERSION_NAME="$(grep -E 'version/name=' export_presets.cfg | head -1 | awk -F'"' '{print $2}' || true)"
        VERSION_CODE="$(grep -E 'version/code=' export_presets.cfg | head -1 | awk -F'=' '{print $2}' || true)"

        # Write outputs using single-line safe assignment
        echo "version_name=${VERSION_NAME}" >> "$GITHUB_OUTPUT"
        echo "version_code=${VERSION_CODE}" >> "$GITHUB_OUTPUT"

        echo "Building for preset: ${{ inputs.EXPORT_PRESET_NAME }}"
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 || true
        sleep 1

        # Platform-specific folder conveniences
        case "${{ inputs.EXPORT_PRESET_NAME }}" in
          *"macOS"*|*"Mac"*) mkdir -p "${{ inputs.EXPORT_DIR }}/osx" ;;
          *"Web"*|*"HTML"*) mkdir -p "${{ inputs.EXPORT_DIR }}/web" ;;
        esac

        set +e
        ~/godot-binary/godot --headless --${mode} "${{ inputs.EXPORT_PRESET_NAME }}"
        STATUS=$?
        set -e

        if [ $STATUS -ne 0 ]; then
          echo "Export failed. Checking common issues..."
          TEMPLATE_VERSION="$(echo "${{ steps.version.outputs.GODOT_VERSION }}" | sed 's/-/./g')"
          if [ ! -d "$HOME/.local/share/godot/export_templates/${TEMPLATE_VERSION}" ]; then
            echo "Export templates not found for ${TEMPLATE_VERSION}"
            exit 1
          fi
          if ! grep -q "name=\"${{ inputs.EXPORT_PRESET_NAME }}\"" export_presets.cfg; then
            echo "Export preset '${{ inputs.EXPORT_PRESET_NAME }}' not found in export_presets.cfg"
            exit 1
          fi
          echo "Godot export returned non-zero status ($STATUS)."
          exit $STATUS
        fi

        echo "Build completed successfully."
        echo "Exported files (first 20):"
        find "${{ inputs.EXPORT_DIR }}" -type f | head -20 || true

    - name: Upload to itch.io (butler)
      if: inputs.BUTLER_UPLOAD == 'true' && inputs.BUTLER_CREDENTIALS != '' && inputs.ITCH_USER_SLASH_GAME != ''
      shell: bash
      run: |
        set -Eeuo pipefail
        curl -sSL -o butler.zip https://broth.itch.zone/butler/linux-amd64/LATEST/archive/default
        unzip -q butler.zip
        chmod +x butler
        echo "butler initialized at $(pwd)"

        export BUTLER_API_KEY="${{ inputs.BUTLER_CREDENTIALS }}"
        cd "${GITHUB_WORKSPACE}/${{ inputs.PROJECT_DIR }}"

        # If Web export, zip the directory
        if [[ "${{ inputs.EXPORT_PRESET_NAME }}" == *"Web"* || "${{ inputs.EXPORT_PRESET_NAME }}" == *"HTML"* ]]; then
          WEB_DIR="${{ inputs.EXPORT_DIR }}/web"
          if [ -d "$WEB_DIR" ] && [ -n "$(ls -A "$WEB_DIR" 2>/dev/null || true)" ]; then
            (cd "$WEB_DIR" && zip -qr ../web.zip .)
            ./butler push "${{ inputs.EXPORT_DIR }}/web.zip" "${{ inputs.ITCH_USER_SLASH_GAME }}:html5" ${VERSION_ARG:-}
            echo "Uploaded web.zip to itch.io (html5)"
            exit 0
          fi
        fi

        # Else try to push individual files (common extensions)
        VERSION_ARG=""
        if [ -n "${{ steps.export.outputs.version_name }}" ]; then
          VERSION_ARG="--userversion ${{ steps.export.outputs.version_name }}"
        fi

        uploaded=false
        while IFS= read -r -d '' file; do
          base="$(basename "$file")"
          channel=""
          preset="${{ inputs.EXPORT_PRESET_NAME }}"

          if [[ "$preset" == *"Android"* ]]; then
            case "$base" in
              *arm32*.apk) channel="android-arm32" ;;
              *arm64*.apk) channel="android-arm64" ;;
              *x86_64*.apk|*x86-64*.apk) channel="android-x86_64" ;;
              *x86*.apk) channel="android-x86" ;;
              *.apk) channel="android" ;;
            esac
          else
            case "$preset" in
              *"Windows x86_32"*) channel="windows-x86" ;;
              *"Windows arm64"*) channel="windows-arm64" ;;
              *"Windows"*) channel="windows" ;;
              *"Linux arm64"*) channel="linux-arm64" ;;
              *"Linux arm32"*) channel="linux-arm32" ;;
              *"Linux x86_32"*) channel="linux-x86" ;;
              *"Linux"*) channel="linux-x86_64" ;;
              *"macOS"*|*"Mac"*) channel="osx" ;;
              *"Web"*|*"HTML"*) channel="html5" ;;
              *"iOS"*) channel="ios" ;;
            esac
            # Fallback by extension
            if [ -z "$channel" ]; then
              case "$base" in
                *.exe) channel="windows" ;;
                *.x86_64) channel="linux-x86_64" ;;
                *.x86_32|*.x86-32) channel="linux-x86" ;;
                *.arm64|*.aarch64) channel="linux-arm64" ;;
                *.arm32) channel="linux-arm32" ;;
                *.ipa) channel="ios" ;;
                *.zip) [[ "$preset" == *"macOS"* || "$preset" == *"Mac"* ]] && channel="osx" || true ;;
              esac
            fi
          fi

          if [ -n "$channel" ]; then
            echo "Uploading $base -> $channel"
            ./butler push "$file" "${{ inputs.ITCH_USER_SLASH_GAME }}:$channel" $VERSION_ARG
            uploaded=true
          else
            echo "Skipping (unknown channel): $base"
          fi
        done < <(find "${{ inputs.EXPORT_DIR }}" -type f \( -name "*.exe" -o -name "*.x86_64" -o -name "*.x86_32" -o -name "*.arm64" -o -name "*.arm32" -o -name "*.apk" -o -name "*.zip" -o -name "*.dmg" -o -name "*.ipa" \) -print0 | head -z -n 20)

        if [ "$uploaded" = false ]; then
          echo "No files uploaded to itch.io. Listing available files:"
          find "${{ inputs.EXPORT_DIR }}" -type f | sed 's/^/ - /'
        fi

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        set +e
        pkill Xvfb 2>/dev/null || true
        rm -f ~/godot-binary/godot.zip ~/templates.tpz ~/blender.tar.xz ~/release.keystore.asc 2>/dev/null || true

branding:
  icon: 'loader'
  color: 'blue'
